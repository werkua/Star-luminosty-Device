#include<Stepper.h>
#include <Wire.h>
// ---------- LUNA -------------------------------------------------
#include <SoftwareSerial.h> //header file of software serial port
SoftwareSerial Serial1(0,1); //define software serial port name as Serial1 and define pin2 as RX and pin3 as TX
/* For Arduinoboards with multiple serial ports like DUEboard, interpret above two pieces of code and 
directly use Serial1 serial port*/
int dist; //actual distance measurements of LiDAR
int check; //save check value
int i;
int uart[9]; //save data measured by LiDAR
const int HEADER=0x59; //frame header of data package
// -----------------------------------------------------------------
// silnik niebieski 
#define STEPPER1_PIN_1 4
#define STEPPER1_PIN_2 5
#define STEPPER1_PIN_3 6
#define STEPPER1_PIN_4 7

int step_number_1 = 0;
int step_number_2 = 0;

// dodałam pomaiar odleglosci za pomoca uart
// Define number of steps per revolution:
const int stepsPerRevolution = 200;

// silnik duzy, czarny
// Give the motor control pins names:
#define pwmA 3
#define pwmB 11
#define brakeA 9
#define brakeB 8
#define dirA 12
#define dirB 13
#define prosty A2
#define lewy A3
#define prawy A4

// Initialize the stepper library on the motor shield:
Stepper myStepper1 = Stepper(stepsPerRevolution, dirA, dirB);
Stepper myStepper2 = Stepper(stepsPerRevolution, STEPPER1_PIN_1, STEPPER1_PIN_2, STEPPER1_PIN_3, STEPPER1_PIN_4);
// --------------- zmienne potrzebne w programie -------------------------
int kroki_silnik1 = 0; // liczenie krokow silnikow
int kroki_silnik2 = 0;
int flag = 1; // warunek wykonania petli
int tablica_danych[2]; // tablice danych do porównania
int tablica_poprzednich_danych[] = {0,0}; 
int temp = 0; // ?????
float natezenie = 0;
int poprzednie_natezenie_1 = 0;
int poprzednie_natezenie_2 = 0;

float max_natezenie;
String str = " ";
String str1, str_kat1, str_kat2;
int s;
 int k = 0; 
float kat1, kat2;
int str_to_int;
int kroki_do_ustawienia;

void setup() {
  Serial1.begin(115200); //set bit rate of serial port connecting LiDAR with Arduino
  Serial.begin(9600);
  Serial.setTimeout(50);

// ustawiamy piny 
  pinMode(pwmA, OUTPUT);
  pinMode(pwmB, OUTPUT);
  pinMode(brakeA, OUTPUT);
  pinMode(brakeB, OUTPUT);

  digitalWrite(pwmA, HIGH);
  digitalWrite(pwmB, HIGH);
  digitalWrite(brakeA, LOW);
  digitalWrite(brakeB, LOW);

  // Set the motor speed (RPMs):
  myStepper1.setSpeed(60);

  pinMode(STEPPER1_PIN_1, OUTPUT);
  pinMode(STEPPER1_PIN_2, OUTPUT);
  pinMode(STEPPER1_PIN_3, OUTPUT);
  pinMode(STEPPER1_PIN_4, OUTPUT);
  // czujniki światla
    pinMode(prosty, INPUT);
    pinMode(lewy, INPUT);
    pinMode(prawy, INPUT);
    start();
  delay(2);
}

void loop() {
    int value1 = analogRead(prosty); // wartosc natezenia w luxxxjach 
    int value2 = analogRead(lewy); 
    int value3 = analogRead(prawy);
    natezenie = value3;

     if(Serial.available()){
    str = Serial.readString();
    str1 = str.substring(0,1);
    str_to_int  = str1.toInt();
    if(str.length() > 1){
        str_kat1 = str.substring(0,2);
        kat1 = str_kat1.toFloat();
        str_to_int  = 3;
    }
     //   Serial.print(str_to_int);
        Serial.print("\n");

  }
    // Step one revolution in one direction:
    // myStepper1.step(1); // ruch przeciwnie do wskazowek 

    if(  kroki_silnik1 > 2400 || kroki_silnik1 < -2400 ){ // silnik maly niebieski
    kroki_silnik1  = 0;
  }
    if(  kroki_silnik2 > 400 || kroki_silnik2 < -400 ){ // silnik maly niebieski
    kroki_silnik2  = 0;
  }
    int kroki2 = kroki_silnik2;
      if(  kroki2 > 200 || kroki2 < -200 ){ // silnik duzy czarny dane do wypisania 
       kroki2 = 0;
      }
    // porownanie wartosci natezen na czujnikach i wywolanie odpowiedniej dla nich funkcji 
     switch(str_to_int){
case 1:
        if ( value2 < value3) {
            prosto1();
            delay(20);
        }
         if (value3 < value2) {
            prosto2();
            delay(20);
        }

    delay(2);
  break;

  case 2:
    for(int i = kroki_silnik2; i>=0; i--){
      prosto();
      delay(20);
    }
    delay(1000);
  break;

  case 3:
      kroki_do_ustawienia = degreeToStep(200, kat1);
        while(kroki_do_ustawienia != kroki_silnik2){
          prosto();
          delay(20);
        }
  break;

  case 4:
  break;
  
  }
//  OneStep_1(false); // false powoduje ruch zgodnie ze wskazówkami zegara
 if (Serial1.available()) { //check if serial port has data input
     if(Serial1.read() == HEADER) { //assess data package frame header 0x59
     uart[0]=HEADER;
     if (Serial1.read() == HEADER) { //assess data package frame header 0x59
       uart[1] = HEADER;
       for (i = 2; i < 9; i++) { //save data in array
         uart[i] = Serial1.read();
       }
       check = uart[0] + uart[1] + uart[2] + uart[3] + uart[4] + uart[5] + uart[6] + uart[7];
       if (uart[8] == (check & 0xff)){ //verify the received data as per protocol
         dist = uart[2] + uart[3] * 256; //calculate distance value

     delay(200);
         }
       }
     }
   }
    Serial.print(kroki_silnik1);
    Serial.print('\t');
    Serial.print(kroki_silnik2);
    Serial.print('\t');
    Serial.print(value1);
    Serial.print('\t');
    Serial.print(value2);
    Serial.print('\t');
    Serial.print(value3);
    Serial.print('\t');
    Serial.print(dist); //output measure distance value of LiDAR
    Serial.print('\n');
     str = " ";

}
void koniec(){
  Serial.print("koniec");
    Serial.print("\n");
delay(60000);
  // kod na zoknczenie do obliczenia swiatlosci;
          int value1 = analogRead(prosty);  
          int nat1, nat2, nat3, nat4;
          int value2 = analogRead(prawy); 
          int value3 = analogRead(lewy);
        myStepper1.step(1);
        nat1 = value1;
        delay(200);
        OneStep_1(true);
        nat2 = value2;
        delay(200);
        myStepper1.step(-1);
        nat3 = value3;
        delay(200);
        OneStep_1(false);
        delay(20);
        Serial.print(nat1);       
        Serial.print('\t');
        Serial.print(nat2);       
        Serial.print('\t');
        Serial.print(nat3);       
        Serial.print('\t');
        Serial.print('\n');
        //---------------------------------------------------------------------------
         if (Serial1.available()) { //check if serial port has data input
     if(Serial1.read() == HEADER) { //assess data package frame header 0x59
     uart[0]=HEADER;
     if (Serial1.read() == HEADER) { //assess data package frame header 0x59
       uart[1] = HEADER;
       for (i = 2; i < 9; i++) { //save data in array
         uart[i] = Serial1.read();
       }
       check = uart[0] + uart[1] + uart[2] + uart[3] + uart[4] + uart[5] + uart[6] + uart[7];
       if (uart[8] == (check & 0xff)){ //verify the received data as per protocol
         dist = uart[2] + uart[3] * 256; //calculate distance value
    Serial.print('\t');
    Serial.print(nat1);
    Serial.print('\t');
    Serial.print(nat2);
    Serial.print('\t');
    Serial.print(nat3);
    Serial.print('\t');
    Serial.print(dist); //output measure distance value of LiDAR
    Serial.print('\n');
        //---------------------------------------------------------------------------
    delay(200);
         }
       }
     }
         }
  max_natezenie = 0;
        delay(200);
        
}
int degreeToStep(int max, float angle){
  int step = angle*1.0*max/(1.0*360);
  return step;
}
float stepToDegree(int max, int steps){
  float kat = 1.0*360/(1.0*max)*steps;
  return kat;
}
void step_back() {
    int roznica_gornego = tablica_poprzednich_danych[0] - tablica_danych[0];
    int roznica_dolnego = tablica_poprzednich_danych[1] - tablica_danych[1];
    for (int i = 0; i < abs(roznica_gornego); i++) {
        if (roznica_gornego < 0)
        {
            lewo();
        }
        else {
            prawo();
        }
    }
    for (int i = 0; i < abs(roznica_dolnego); i++) {
        if (roznica_dolnego < 0) {
            myStepper1.step(1);
            kroki_silnik2 = kroki_silnik2 + 1; // dodajemy krok
        }
        else {
            myStepper1.step(-1);
            kroki_silnik2 = kroki_silnik2 - 1; // odejmujemy krok
        }
    }
}
void prosto1(){

       myStepper1.step(1);
       kroki_silnik2 = kroki_silnik2 + 1; // dodajemy krok
       

    if(  kroki_silnik2 > 400 || kroki_silnik2 < -400 ){ // silnik maly niebieski
    kroki_silnik2  = 0;
  }
}
void prosto2(){

      myStepper1.step(-1);
      kroki_silnik2 = kroki_silnik2 + 1; // odejmujemy krok
          if(  kroki_silnik2 > 400 || kroki_silnik2 < -400 ){ // silnik maly niebieski
    kroki_silnik2  = 0;
  }
}

void prosto() {
    // funkcja prosto powoduje przekrecenie sie dolnego silnika w te strone, w ktora nachylony jest "wskaznik".
    // strona, w ktora sie kreci zalezna jest od wartosci kroki_silnik1, jesli dodatnie - w prawo, ujemne - w lewo (albo na odwrot XD)
    if (abs(kroki_silnik2)  >= 0 && abs(kroki_silnik2 < 200) )
    {
      prosto1();
    }
    else if(abs(kroki_silnik2)  >= 200) 
     {
      prosto2();
    }

    delay(50);
}
void start(){
    Serial.print("start");
    Serial.print("\n");
    kroki_silnik1  = 0;
    kroki_silnik2  = 0;
}
void ustaw_domyslna_pozycje(){
    Serial.print("domyslna pozycja");
    Serial.print("\n");
  // pozycja 0 0;
  // w zaleznosci, co jest blizej dac warunki dla niebieskiegos
     
     for(int i = kroki_silnik1; i>=0; i--){
      if(kroki_silnik1 > 1200){
      lewo();
      delay(20);
      }else{
      prawo();
            delay(20);
      }
    }
    for(int i = kroki_silnik2; i>=0; i--){
      prosto();
            delay(20);

    }
    delay(60000);
// jezeli silnik gorny jest nachylony na prawo - funkcja lewo;
// jezeli silnik gorny jest nachylony na lewo - funkcja prawo;
}



void OneStep_1(bool dir) {
  
  if (dir) {
    switch (step_number_1) {
    case 0:
      digitalWrite(STEPPER1_PIN_1, HIGH);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, LOW);
      break;
    case 1:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, HIGH);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, LOW);
      break;
    case 2:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, HIGH);
      digitalWrite(STEPPER1_PIN_4, LOW);
      break;
    case 3:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, HIGH);
      break;
    }
  }
  else {
    switch (step_number_1) {
    case 0:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, HIGH);
      break;
    case 1:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, HIGH);
      digitalWrite(STEPPER1_PIN_4, LOW);
      break;
    case 2:
      digitalWrite(STEPPER1_PIN_1, LOW);
      digitalWrite(STEPPER1_PIN_2, HIGH);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, LOW);
      break;
    case 3:
      digitalWrite(STEPPER1_PIN_1, HIGH);
      digitalWrite(STEPPER1_PIN_2, LOW);
      digitalWrite(STEPPER1_PIN_3, LOW);
      digitalWrite(STEPPER1_PIN_4, LOW);
      

    }
  }
  step_number_1++;
  if (step_number_1 > 3) {
    step_number_1 = 0;
  }
}
